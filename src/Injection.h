/*****************************************************************************
*  Routerless Network-on-Chip Simulator                                      *
*                                                                            *
*  @file     Flit.h                                                          *
*  @brief    Injection is a part of Network Interface. This file             *
*            illustrates when and how to inject a flit and a packet.         *
*                                                                            *
*  @author   Yizhuo Meng                                                     *
*  @email    myz2ylp@connect.hku.hk                                          *
*  @date     2020.03.16                                                      *
*                                                                            *
*****************************************************************************/

#ifndef NOCSIM_INJECTION_H
#define NOCSIM_INJECTION_H
#include "Flit.h"
#include "ringalgorithm/RingAlgorithms.h"
#include "Util.h"
#include "GlobalParameter.h"
#include "Traffic.h"

#include <vector>
#include <plog/Log.h>

class Packet;
class Ring;
class Flit;
struct Packetinfo;
class Traffic;
class ExbManager;
using namespace std;

/**
 * @brief Injeciton Module
 *        Generate New Packetinfo and Packets
 *        Flit(Data Flit) and Control Flit Injection
 *        Injection queue maintenance
 */
class Injection {
public:
    /*Getter and setter functions*/
    inline Packet* get_ongoing_packet()const{return m_ongoing_packet;}
    inline void complete_ongoing_packet(){m_ongoing_packet = nullptr;}
    inline int get_ongoing_ring_index()const{return m_injecting_ring_index;}
    inline bool is_injection_interrupted()const{return m_interrupt;}
    inline void set_interrupt(bool status){m_interrupt = status;}
    inline bool is_packetinfo_empty()const{return m_packetinfo.empty()?true:false;}

    /**
     * @brief Return the oldest packetinfo to the node
     */
    inline Packetinfo* get_new_packetinfo()const{return m_packetinfo.front();}

    /**
     * @brief Get the size of injection queue
     *        Called to calculate how many packetinfo leaves when simulation ends
     */
    int left_packetinfo_num()const{return m_packetinfo.size();}

    /**
     * @brief Send control packet for each ring across the current node
     *        This function does not obey the sequential injection,
     *        but inject all control packets in one cycle,
     *        for accelerating the process of routing table generation
     * @param cycle Current time
     * @param reference of ring_id vector of the current node.
     */
    void controlpacket_generator(int cycle,vector<int>& curr_ring_id);

    /**
     * @brief Inject a new packet into the ring.
     *        If length is greater than 1,
     *        the function, Node::continue_inject_packet(), will inject the rest
     * @param ring_index  Get ring_id through access curr_ring_id[ring_index]
     */
    void inject_new_packet(int ring_index);

    /**
     * @brief Generate packetinfo according the time
     *        Process:
     *                 Get a packeinfor from Class Traffic
     *                 Extract length of packet to be injected from the packetinfo
     *                 Time difference*injection_rate > length?
     *                 -->Yes, put the packetinfo to the injeciton queue
     *                    Update the time cycle of this injection
     *                 -->No, wait for the next cycle
     *        the function, Node::continue_inject_packet(), will inject the rest
     * @param traffic  reference of traffic object, determined in configuration phrase
     */
    void packetinfo_generator(int cycle, Traffic& traffic);

    Injection(int node_id, vector<int>* curr_ring_id);
    ~Injection();

    /*Only for test*/
    void print_packetinfo();

private:
    /*Node id*/
    int m_local_id;

    /*A temp buffer for packetinfo generated by traffic*/
    Packetinfo* m_ongoing_packetinfo;

    /*The time when the last packetinfo is put into the injection queue*/
    int m_time;

    /* A container for the ring index of the being injected packet
     * Used in Node::continue_inject_packet()
     * */
    int m_injecting_ring_index;
    /* A pointer to the being injected packet
     * Also an indicator for whether injection is going on or not
     * */
    Packet* m_ongoing_packet;

    bool m_interrupt;

    /* Injection Queue
     * Always access the first element(also the oldest one)
     * */
    vector<Packetinfo*> m_packetinfo;

    /*A pointer to ring id*/
    vector<int>* m_curr_ring_id;

    //如果这里检查src和dst相等 就把该packetinfo删除释放 也就是说该节点不会再产生任何packet
    void packetinfo_attach(Packetinfo* info, int cycle);

    //packetinfo和packet他们的产生不同点在于 packetinfo需要严格按照产生速度
    // 而packet只要满足条件(ring+exb)且m_packetinfo不为空 就要产生packet
    //检查m_packetinfo不为空 就要产生packet 放在exb检查后面

};


#endif //NOCSIM_INJECTION_H
